@page "/trades/{id}/trade"

<Modal IsOpen="IsFetching" Title="Loading" ModalButtonOptions="ModalButtonOptions.NONE">
    <p class="regular-p-grey">Please wait</p>
</Modal>

@if (TradeInfo is not null)
{
    <div class="trade-main">
        <div class="trade-main-top">
            <p class="role">Your role: @TradeInfo.Role</p>
            <a href=@($"trades/{TradeInfo.TradeId}/chat?tradeId={TradeInfo.TradeId}&title=Trade%20{TradeInfo.ShortId}%20chat&arbitrator={TradeInfo.ArbitratorNodeAddress.Split(".")[0]}&tradePeer={TradeInfo.TradePeerNodeAddress.Split(".")[0]}&myAddress={TradeInfo.Offer.OwnerNodeAddress.Split(".")[0]}")>
                <ion-icon name="chatbubble-ellipses-sharp"></ion-icon>
            </a>
        </div>
        @if (IsBuyer)
        {
            <ul class="process">
                @for (int i = 0; i < BuyerSteps.Length; i++)
                {
                    <li class="process-step">
                        @{
                            var stepCompletedOrCurrent = i < BuyerState;
                        }

                        @if (i + 1 < BuyerState)
                        {
                            <i class=@($"bi bi-check-circle-fill " + (stepCompletedOrCurrent ? "completed-step" : ""))></i>
                        }
                        else
                        {
                            <i class=@($"bi bi-{i+1}-circle" + (stepCompletedOrCurrent ? "-fill completed-step" : ""))></i>
                        }
                        <p class="@(stepCompletedOrCurrent ? "completed-step" : "")">@BuyerSteps[i]</p>
                        @if (i + 1 == BuyerState && i + 1 < BuyerSteps.Length)
                        {
                            <span class="loader"></span>
                        }
                    </li>
                }
            </ul>
            @if (!string.IsNullOrEmpty(DisputeMessage))
            {
                <div class="dispute-container">
                    <i class="bi-exclamation-circle info"></i>
                    <p>@DisputeMessage</p>
                </div>
            }
            @switch (BuyerState)
            {
                case 2:
                    <div class="payment-instructions">
                        <p class="bold-p start-payment">Start payment using @TradeInfo.Offer.PaymentMethodShortName</p>

                        <InfoRow Label="Amount to transfer" Value="@(TradeInfo.TradeVolume + " " + (IsFiat ? TradeInfo.Offer.CounterCurrencyCode : TradeInfo.Offer.BaseCurrencyCode))"></InfoRow>
                        @foreach (var keyVal in TradeInfo.Offer.IsMyOffer ? TradeInfo.Contract.TakerPaymentAccountPayload.Convert() : TradeInfo.Contract.MakerPaymentAccountPayload.Convert())
                        {
                            <InfoRow IsExpandable="true" Label="@keyVal.Key" Value="@keyVal.Value"></InfoRow>
                        }
                    </div>
                    <div class="slider-wrapper">
                        <Slider OnReachedEnd="async () => await ConfirmPaymentSentAsync(TradeInfo.TradeId)" Text="Payment sent" />
                    </div>
                    <Attention/>
                    break;
                case 4:
                    <button class="button-green" @onclick="async () => await CompleteTradeAsync(TradeInfo.TradeId)">Close trade</button>
                    break;
                default: break;
            }
        }
        else
        {
            <ul class="process">
                @for (int i = 0; i < SellerSteps.Length; i++)
                {
                    <li class="process-step">
                        @{
                            var stepCompletedOrCurrent = i < SellerState;
                        }

                        @if (i + 1 < SellerState)
                        {
                            <i class=@($"bi bi-check-circle-fill " + (stepCompletedOrCurrent ? "completed-step" : ""))></i>
                        }
                        else
                        {
                            <i class=@($"bi bi-{i+1}-circle" + (stepCompletedOrCurrent ? "-fill completed-step" : ""))></i>
                        }
                        <p class="@(stepCompletedOrCurrent ? "completed-step" : "")">@SellerSteps[i]</p>
                        @if (i + 1 == SellerState && i + 1 < SellerSteps.Length)
                        {
                            <span class="loader"></span>
                        }
                    </li>
                }
            </ul>
            @if (!string.IsNullOrEmpty(DisputeMessage))
            {
                <div class="dispute-container">
                    <i class="bi-exclamation-circle info"></i>
                    <p>@DisputeMessage</p>
                </div>
            }
            @switch (SellerState)
            {
                case 3:
                    <div class="slider-wrapper">
                        <Slider OnReachedEnd="async () => await ConfirmPaymentReceivedAsync(TradeInfo.TradeId)" Text="Payment received"/>
                    </div>
                    <Attention />
                    break;
                case 4:
                    <button class="button-green" @onclick="async () => await CompleteTradeAsync(TradeInfo.TradeId)">Close trade</button>
                    break;
                default: break;
            }
        }
        <div class="info">
            <p class="bold-p info-txt">Trade info</p>
            @if (TradeInfo.Offer.BuyerSecurityDepositPct == 0)
            {
                <div class="no-deposit">
                    <img src="icons/warning.svg" />
                    <p>This is a no deposit offer</p>
                </div>
            }
            <div class="amount-price-info">
                <div class="price-info">
                    @if (TradeInfo.Offer.BaseCurrencyCode == "XMR")
                    {
                        @(TradeInfo.Offer.Direction == "SELL" ? TradeInfo.Offer.CounterCurrencyCode : TradeInfo.Offer.BaseCurrencyCode)
                        <img src="icons/arrow-right.svg" />
                        @(TradeInfo.Offer.Direction == "SELL" ? TradeInfo.Offer.BaseCurrencyCode : TradeInfo.Offer.CounterCurrencyCode)
                    }
                    else
                    {
                        @*                @(TradeInfo.Offer.Direction == "SELL" ? "XMR" : TradeInfo.Offer.BaseCurrencyCode)
                        <img src="icons/arrow-right.svg" />
                        @(TradeInfo.Offer.Direction == "SELL" ? TradeInfo.Offer.BaseCurrencyCode : "XMR") *@
                    }
                </div>
                <div class="amount-info">
                    @if (TradeInfo.Offer.BaseCurrencyCode == "XMR")
                    {
                        <p>Amount: @TradeInfo.Amount.ToMonero() @(IsFiat ? "XMR" : TradeInfo.Offer.BaseCurrencyCode) / @TradeInfo.TradeVolume @TradeInfo.Offer.CounterCurrencyCode</p>
                        <p>Price: @decimal.Parse(TradeInfo.Price, CultureInfo.InvariantCulture).ToString("0.0000") @TradeInfo.Offer.CounterCurrencyCode</p>
                    }
                    else
                    {
                        <p>Amount: @TradeInfo.Amount.ToMonero() @(IsFiat ? "XMR" : TradeInfo.Offer.CounterCurrencyCode) / @TradeInfo.TradeVolume @TradeInfo.Offer.BaseCurrencyCode</p>
                        <p>Price: @decimal.Parse(TradeInfo.Price, CultureInfo.InvariantCulture).ToString("0.0000") @TradeInfo.Offer.CounterCurrencyCode</p>
                    }
                </div>
            </div>
            @if (!string.IsNullOrEmpty(TradeInfo.TakerDepositTxId))
            {
                <InfoRow IsExpandable="true" Label="Taker deposit transaction ID" Value="@TradeInfo.TakerDepositTxId"></InfoRow>
            }
            <InfoRow IsExpandable="true" Label="Maker deposit transaction ID" Value="@TradeInfo.MakerDepositTxId"></InfoRow>
            <InfoRow Label="Max allowed trade period" Value="@TimeHelper.FormatDuration((long)MaxTradePeriod.TotalMilliseconds)"></InfoRow>
            <InfoRow Label="Expires" Value="@TradeExpiresDateUTC.ToString()"></InfoRow>
        </div>
        <div class="dispute">
            @if (PaymentMethod is not null)
            {
                if (TradeInfo.DisputeState == "NO_DISPUTE")
                {
                    <button @onclick="() => IsDisputeModalOpen = true">Open support ticket</button>
                }
                else
                {
                    <button @onclick="GoToDispute">Go to dispute</button>
                }
            }
        </div>
    </div>
}

<Modal @bind-IsOpen="IsDisputeModalOpen" Title="Open support ticket" ModalButtonOptions="ModalButtonOptions.OK_CANCEL" OnOkPressed="async () => await OpenDisputeAsync(TradeInfo?.TradeId ?? string.Empty)">
    <p class="regular-p-grey">Are you sure you want to open a support ticket?</p>
</Modal>