@page "/trade"

<Modal IsOpen="IsFetching" Title="Loading" ModalButtonOptions="ModalButtonOptions.NONE" IsCloseable="false">
    <p>Please wait...</p>
</Modal>

@if (TradeInfo is not null)
{
    <div class="trade-main">
        <div class="trade-main-top">
            <p class="role">Your role: @((IsBuyer ? "buyer" : "seller") + " as " + (TradeInfo.Offer.IsMyOffer ? "maker" : "taker"))</p>
            <a href=@($"/chat?tradeId={TradeInfo.TradeId}&title=Trade%20{TradeInfo.ShortId}%20chat&arbitrator={TradeInfo.ArbitratorNodeAddress.Split(".")[0]}&tradePeer={TradeInfo.TradePeerNodeAddress.Split(".")[0]}&myAddress={TradeInfo.Offer.OwnerNodeAddress.Split(".")[0]}")>
                <ion-icon name="chatbubble-ellipses-sharp"></ion-icon>
            </a>
        </div>
        @if (IsBuyer)
        {
            <ul class="process">
                @for (int i = 0; i < BuyerSteps.Length; i++)
                {
                    <li class="process-step">
                        @if (i + 1 < BuyerState)
                        {
                            <i class="bi bi-check-circle-fill"></i>
                        }
                        else
                        {
                            <i class=@($"bi bi-{i+1}-circle" + (i < BuyerState ? "-fill" : ""))></i>
                        }
                        <p>@BuyerSteps[i]</p>
                        @if (i + 1 == BuyerState && i + 1 < BuyerSteps.Length)
                        {
                            <span class="loader"></span>
                        }
                    </li>
                }
            </ul>
            @if (IsBuyer && BuyerState == 2)
            {
                <div class="payment-instructions">
                    <p class="bold-p start-payment">Start payment using @TradeInfo.Offer.PaymentMethodShortName</p>

                    <InfoRow Label="Amount to transfer" Value="@(TradeInfo.TradeVolume + " " + TradeInfo.Offer.CounterCurrencyCode)"></InfoRow>
                    @foreach (var keyVal in TradeInfo.Offer.IsMyOffer ? TradeInfo.Contract.TakerPaymentAccountPayload.Convert() : TradeInfo.Contract.MakerPaymentAccountPayload.Convert())
                    {
                        <InfoRow Label="@keyVal.Key" Value="@keyVal.Value"></InfoRow>
                    }
                </div>
            }
            @switch (BuyerState)
            {
                case 0: break;
                case 1: 

                    break;
                case 2:
                    <button @onclick="async () => await ConfirmPaymentSentAsync(TradeInfo.TradeId)">Payment sent</button>
                    break;
                case 3: 

                    break;
                case 4:
                    <button @onclick="async () => await CompleteTradeAsync(TradeInfo.TradeId)">Close trade</button>
                    break;
                default: break;
            }
        }
        else
        {
            <ul class="process">
                @for (int i = 0; i < SellerSteps.Length; i++)
                {
                    <li class="process-step">
                        @if (i + 1 < SellerState)
                        {
                            <i class="bi bi-check-circle-fill"></i>
                        }
                        else
                        {
                            <i class=@($"bi bi-{i+1}-circle" + (i < SellerState ? "-fill" : ""))></i>
                        }
                        <p>@SellerSteps[i]</p>
                        @if (i + 1 == SellerState && i + 1 < SellerSteps.Length)
                        {
                            <span class="loader"></span>
                        }
                    </li>
                }
            </ul>
            @switch (SellerState)
            {
                case 0: break;
                case 1:

                    break;
                case 2:
                    break;
                case 3:
                    <button @onclick="async () => await ConfirmPaymentReceivedAsync(TradeInfo.TradeId)">Payment received</button>
                    break;
                case 4:
                    <button @onclick="async () => await CompleteTradeAsync(TradeInfo.TradeId)">Close trade</button>
                    break;
                default: break;
            }
        }
        <div class="info">
            <p class="bold-p info-txt">Trade info</p>
            <InfoRow IsExpandable="true" Label="Taker deposit transaction ID" Value="@TradeInfo.TakerDepositTxId"></InfoRow>
            <InfoRow IsExpandable="true" Label="Maker deposit transaction ID" Value="@TradeInfo.MakerDepositTxId"></InfoRow>
            <InfoRow Label="Max allowed trade period" Value="@MaxTradePeriod.ToString()"></InfoRow>
            <InfoRow Label="Expires" Value="@TradeExpiresDateUTC.ToString()"></InfoRow>
        </div>
        <div class="dispute">
            @if (PaymentMethod is not null)
            {
                if (IsNotCompletedInTime)
                {
                    if (IsBuyer)
                    {
                        if (BuyerState < 4)
                        {
                            // TODO disable if dispute already exists
                            <button @onclick="async () => await OpenDisputeAsync(TradeInfo.TradeId)">Open support ticket</button>
                        }
                    }
                    else if (SellerState < 4)
                    {
                        <button @onclick="async () => await OpenDisputeAsync(TradeInfo.TradeId)">Open support ticket</button>
                    }
                }
            }
        </div>
    </div>
}
