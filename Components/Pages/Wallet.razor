@page "/wallet"

<Modal @bind-IsOpen="@VerifyModalIsOpen" Title="Verify withdrawal" OnOkPressed="WithdrawAsync" OkButtonText="Withdraw">
    <div class="modal-content regular-p-grey">
        <p>Sending @Amount XMR</p>
        <p class="withdrawal-address">To address: @WithdrawalAddress</p>
        <p>Fee: @(ulong.Parse(Transaction?.Fee ?? "0", CultureInfo.InvariantCulture).ToMonero()) XMR</p>
    </div>
</Modal>
<Modal @bind-IsOpen="@CreatingTxModalIsOpen" Title="Creating transaction" ModalButtonOptions="ModalButtonOptions.NONE" IsCloseable="false">
    <Spinner IsFullscreen="false"></Spinner>
    <p class="regular-p-grey">Please wait</p>
</Modal>
<Modal @bind-IsOpen="@ShowWalletSeed" Title="Wallet seed" CancelButtonText="Close" OkButtonText="Copy" OnOkPressed="async() => await Clipboard.Default.SetTextAsync(WalletSeed)">
    <p class="regular-p-grey">@WalletSeed</p>
</Modal>
<div class="wallet-main">
    <div class="top">
        <div class="monero-card">
            <div class="monero-card-top ">
                <div class="logo"></div>
                <p class="wallet-title">Monero Wallet</p>
            </div>
            <div class="monero-card-bottom">
                <div class="monero-card-bottom-available">
                    <p class="wallet-balance-fiat">@(AvailableFiat.ToString("C", PreferredCurrencyFormat))</p>
                    <p class="wallet-pending-balance-fiat">@(PendingFiat.ToString("C", PreferredCurrencyFormat)) pending</p>
                </div>
                <div class="monero-card-bottom-pending">
                    <p class="wallet-balance-crypto">XMR @((Balance?.AvailableXMRBalance ?? 0).ToMonero().ToString("0.0000")) </p>
                    <p class="wallet-pending-balance-crypto">XMR @((Balance?.PendingXMRBalance ?? 0).ToMonero().ToString("0.0000")) pending</p>
                    <p class="wallet-reserved-balance-crypto">XMR @(((Balance?.ReservedTradeBalance ?? 0) + (Balance?.ReservedOfferBalance ?? 0)).ToMonero().ToString("0.0000")) reserved</p>
                </div>
            </div>
        </div>
        <div class="tab-container">
            <Tabs Center="true" TabNames="@(["Addresses", "Withdraw", "Transactions"])" @bind-SelectedTabIndex="@SelectedTabIndex"/>
        </div>
    </div>
    @switch (SelectedTabIndex)
    {
        case 0:
            <ul>
                @if (Addresses.Count == 0)
                {
                    <li>
                        <InfoRow Value="Loading..."></InfoRow>
                    </li>
                }
                else
                {
                    foreach (var address in Addresses)
                    {
                        <li>
                            <InfoRow IsExpandable="true" Value="@address"></InfoRow>
                        </li>
                    }
                }
            </ul>
            <div>
                <div class="slider-wrapper">
                    <Slider OnReachedEnd="GetXmrSeedAsync" Text="Show wallet seed" />
                </div>
                <Attention/>
            </div>
            break;
        case 1:
            <div class="withdraw">
                @if (Balance is null)
                {
                    <p>Wallet not ready</p>
                }
                else
                {
                    <label for="withdrawalAddress">Withdrawal address</label>
                    <input id="withdrawalAddress" name="withdrawalAddress" @bind="WithdrawalAddress" placeholder="Address" />
                    <label for="amount">Amount</label>
                    <div class="amount-container">
                        <input id="amount" name="amount" type="number" @bind="Amount" />
                        @* <p class="send-all" @onclick="() => _piconeroAmount = Balance.AvailableXMRBalance">Send all</p> *@
                    </div>
@*                     <label for="memo">Memo</label>
                    <input id="memo" name="memo" @bind="Memo" placeholder="Optional" /> *@
                    <button @onclick="CreateTransaction" disabled="@(string.IsNullOrEmpty(WithdrawalAddress) || Amount == 0m || WithdrawalAddress.Length != 95)">Withdraw</button>                    
                }
            </div>
            break;
        case 2:
            <ul>
                @if (Transactions.Count == 0)
                {
                    <li>No Transactions</li>
                }
                else
                {
                    foreach (var transaction in Transactions.OrderByDescending(x => x.Timestamp))
                    {
                        <li class="transaction-card">
                            @if (transaction.IncomingTransfers?.Count > 0)
                            {
                                <img src="icons/arrow-right.svg" class="in" />
                                <p class="transaction-amount">
                                    XMR @transaction.IncomingTransfers.Aggregate(ulong.MinValue, (x, y) => x + ulong.Parse(y.Amount, CultureInfo.InvariantCulture)).ToMonero().ToString("0.000")
                                </p>
                            }
                            else
                            {
                                <img src="icons/arrow-right.svg" class="out" />
                                <p class="transaction-amount">
                                    XMR @ulong.Parse(transaction.OutgoingTransfer.Amount, CultureInfo.InvariantCulture).ToMonero().ToString("0.000")
                                </p>
                            }
                            <p>
                                @if (transaction.IsLocked)
                                {
                                    <p>Pending</p>
                                } 
                                else
                                {
                                    @(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc).AddSeconds(transaction.Timestamp).ToLocalTime())
                                }
                            </p>
                        </li>
                    }
                }
            </ul>
            break;
        default:
            break;
    }
</div>