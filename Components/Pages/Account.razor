@page "/Account"

<Modal @bind-IsOpen="ShowDeleteAccountModal" Title="Delete account" OnOkPressed="async () => { await DeleteAccountAsync(AccountToDelete ?? string.Empty); AccountToDelete = null; }">
    <p class="regular-p-grey">Are you sure you want to delete this account?</p>
</Modal>
<div class="account-main">
    <p class="accounts-text">My accounts</p>
    <div class="accounts">
        @* <Tabs TabNames="@(["Traditional", "Crypto"])" @bind-SelectedTabIndex="@SelectedTabIndex"></Tabs> *@

        @if (PaymentAccounts.Count == 0)
        {
            <p>No accounts</p>
        }
        else
        {
            foreach (var account in PaymentAccounts)
            {
                <div class=@(account.PaymentMethod.Id == SelectedPaymentAccount?.PaymentMethod.Id ? "account active-account" : "account") @onclick="() => HandleAccountClick(account)">
                    <p>@PaymentMethodsHelper.PaymentMethodsDictionary[account.PaymentMethod.Id]</p>
                    @* <p>@account.AccountName</p> *@
                    <img src="icons/x.svg" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => { AccountToDelete = account.Id; ShowDeleteAccountModal = true; }" />
                </div>
            }
        }
    </div>
    <div class="payment-methods-container">
        <div>
            <SearchableDropdown 
            Placeholder="Select payment method"
            @ref="PaymentMethodSearchableDropdown"
            Items="@TraditionalPaymentMethodStrings"
            Text="Create new account"
            InitialValue="@AccountToCreate"
            OnSubmit="@((val) => SelectedPaymentMethodId = val)" />
        </div>
    </div>

    @if (SelectedPaymentAccount is not null)
    {
        <p class="account-info-text">Account info</p>

        <InfoRow Label="Payment method" Value="@PaymentMethodsHelper.PaymentMethodsDictionary[SelectedPaymentAccount.PaymentMethod.Id]"></InfoRow>

        @* could use helper here *@

        switch (SelectedPaymentAccount.PaymentMethod.Id)
        {
            case "NATIONAL_BANK":

                break;
            case "F2F":

                break;
            case "ZELLE":
                <InfoRow Label="Account owner full name" Value="@SelectedPaymentAccount.PaymentAccountPayload.ZelleAccountPayload.HolderName"></InfoRow>
                <InfoRow Label="Email or mobile no." Value="@SelectedPaymentAccount.PaymentAccountPayload.ZelleAccountPayload.EmailOrMobileNr"></InfoRow>
                break;
            case "REVOLUT":
                <InfoRow Label="Username" Value="@SelectedPaymentAccount.PaymentAccountPayload.RevolutAccountPayload.Username"></InfoRow>
                break;
            default:
                <InfoRow Label="Username" Value="@SelectedPaymentAccount.AccountName"></InfoRow>
                break;
        }

        <div class="supported-currencies">
            <InfoRow Label="Supported currencies" Value="@(string.Join(", ", SelectedPaymentAccount.TradeCurrencies.Select(x => x.Code)))"></InfoRow>
        </div>
    }
    @if (CreateCryptoCurrencyPaymentAccountRequest is not null)
    {
        <div class="input-fields">
            <div class="field">
                <SearchableDropdown OnSubmit="(item) => { CreateCryptoCurrencyPaymentAccountRequest.CurrencyCode = item; CreateCryptoCurrencyPaymentAccountRequest.AccountName = item; }" Text="Cryptocurrency" Items="CryptoCurrencyHelper.CryptoCurrenciesDictionary" Placeholder="Select or search cryptocurrency" />
            </div>
            <div class="field">
                <label>Cryptocurrency address</label>
                <InputText placeholder="" @bind-Value="CreateCryptoCurrencyPaymentAccountRequest.Address"></InputText>
            </div>
            <div class="field">
                <InfoRow Label="Limitations" Value="@($"{MaxTradeLimit}, {MaxTradePeriod}")"></InfoRow>
            </div>
            <label>Account name</label>
            <InputText readonly="@(!CustomAccountNameEnabled)" @bind-Value="CreateCryptoCurrencyPaymentAccountRequest.AccountName"></InputText>
            <div class="custom-account-name">
                <InputCheckbox @bind-Value="@CustomAccountNameEnabled" />
                <label>Use custom account name</label>
            </div>
            <button @onclick="CreateCryptoPaymentAccountAsync">Save new account</button>
        </div>
    }
    else if (PaymentAccountForm is not null)
    {
        <EditForm EditContext="_editContext" class="input-fields" OnValidSubmit="CreatePaymentAccountAsync">
            <DataAnnotationsValidator />
            @foreach (var field in PaymentAccountForm.Fields)
            {
                switch (field.Id)
                {
                    case Protobuf.PaymentAccountFormField.Types.FieldId.TradeCurrencies:
                        @if (SupportedCurrencyCodes.Count != 0)
                        {
                            <div class="checkbox-list-wrapper">
                                <div class="checkbox-list">
                                    <p class="checkbox-list-text ">Supported currencies</p>
                                    @foreach (var supportedCurrencyCode in SupportedCurrencyCodes)
                                    {
                                        <div class="checkbox-container">
                                            <InputCheckbox @bind-Value="@supportedCurrencyCode.IsSelected" />
                                            <label>@supportedCurrencyCode.Code</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case Protobuf.PaymentAccountFormField.Types.FieldId.AccountName:
                        <div class="field">
                            <label>@field.Label</label>
                            <InputText readonly="@(!CustomAccountNameEnabled)" @bind-Value="field.Value"></InputText>
                            <div class="custom-account-name">
                                <InputCheckbox @bind-Value="@CustomAccountNameEnabled" />
                                <label>Use custom account name</label>
                            </div>
                            <ValidationMessage For="() => field.Label" />
                        </div>
                        break;
                    case Protobuf.PaymentAccountFormField.Types.FieldId.Salt:
@*                         <div class="field">
                            <label>@field.Label</label>
                            <InputText readonly="true" @bind-Value="field.Value"></InputText>
                            <ValidationMessage For="() => field.Label" />
                        </div> *@
                        break;
                    case Protobuf.PaymentAccountFormField.Types.FieldId.Country:
                        <div class="field">
                            <SearchableDropdown OnSubmit="HandleCountryChanged" Placeholder="Select country" Text="@field.Label" Items="@(field.SupportedCountries.ToDictionary(x => x.Code, x => $"{x.Name} ({x.Code})"))"></SearchableDropdown>
                        </div>
                        break;
                    case Protobuf.PaymentAccountFormField.Types.FieldId.AcceptedCountryCodes:
                        @if (AcceptedEUSEPACountries.Count != 0)  // Should probably be a component
                        {
                            <div class="checkbox-list-wrapper">
                                <div class="checkbox-list">
                                    <p class="checkbox-list-text">Accept trades from these EU countries</p>
                                    @foreach (var acceptedCountry in AcceptedEUSEPACountries)
                                    {
                                        <div class="checkbox-container">
                                            <InputCheckbox @bind-Value="@acceptedCountry.IsSelected" />
                                            <label>@acceptedCountry.Code</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @if (AcceptedNonEUSEPACountries.Count != 0)
                        {
                            <div class="checkbox-list-wrapper">
                                <div class="checkbox-list">
                                    <p class="checkbox-list-text">Accept trades from these non-EU countries</p>
                                    @foreach (var acceptedCountry in AcceptedNonEUSEPACountries)
                                    {
                                        <div class="checkbox-container">
                                            <InputCheckbox @bind-Value="@acceptedCountry.IsSelected" />
                                            <label>@acceptedCountry.Code</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    default:
                        <div class="field">
                            <label>@field.Label</label>
                            <InputText placeholder="" @bind-Value="field.Value"></InputText>
                            <ValidationMessage For="() => field.Label" />
                        </div>
                        break;
                }
            }
            <div class="field">
                <InfoRow Label="Limitations" Value="@($"Max {((ulong)MaxTradeLimit).ToMonero()} XMR / Max trade duration: {TimeHelper.FormatDuration(MaxTradePeriod)}")"></InfoRow>
            </div>
            <button type="submit">Save new account</button>
        </EditForm>
    }
</div>