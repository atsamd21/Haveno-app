@page "/Account"

<Modal @bind-IsOpen="ShowDeleteAccountModal" Title="Delete account" OnOkPressed="async () => { await DeleteAccountAsync(AccountToDelete ?? string.Empty); AccountToDelete = null; }">
    <p class="regular-p-grey">Are you sure you want to delete this account?</p>
</Modal>
<div class="account-main">
    <p class="accounts-text">My accounts</p>
    <div class="accounts">
        @* <Tabs TabNames="@(["Traditional", "Crypto"])" @bind-SelectedTabIndex="@SelectedTabIndex"></Tabs> *@

        @if (PaymentAccounts.Count == 0)
        {
            <p>No accounts</p>
        }
        else
        {
            foreach (var account in PaymentAccounts)
            {
                <div class=@(account.CreationDate == SelectedPaymentAccount?.CreationDate ? "account active-account" : "account") @onclick="() => HandleAccountClick(account)">
                    <p>@PaymentMethodsHelper.PaymentMethodsDictionary[account.PaymentMethod.Id]</p>
                    @* <p>@account.AccountName</p> *@
                    <img src="icons/x.svg" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="() => { AccountToDelete = account.Id; ShowDeleteAccountModal = true; }" />
                </div>
            }
        }
    </div>
    <div class="payment-methods-container">
        <SearchableDropdown 
            Placeholder="Select payment method"
            @ref="PaymentMethodSearchableDropdown"
            Items="@TraditionalPaymentMethodStrings"
            Text="Create new account"
            InitialValue="@AccountToCreate"
            OnSubmit="@((val) => SelectedPaymentMethodId = val)" />
    </div>

    @if (SelectedPaymentAccount is not null)
    {
        <p class="account-info-text">Account info</p>

        <InfoRow Label="Payment method" Value="@PaymentMethodsHelper.PaymentMethodsDictionary[SelectedPaymentAccount.PaymentMethod.Id]"></InfoRow>

        @foreach (var keyVal in SelectedPaymentAccount.PaymentAccountPayload.Convert())
        {
            <InfoRow IsExpandable="true" Label="@keyVal.Key" Value="@keyVal.Value"></InfoRow>
        }

        <div class="supported-currencies">
            <InfoRow Label="Supported currencies" Value="@(string.Join(", ", SelectedPaymentAccount.TradeCurrencies.Select(x => x.Code)))"></InfoRow>
        </div>
    }
    @if (CreateCryptoCurrencyPaymentAccountRequest is not null)
    {
        <div class="input-fields">
            <div class="field">
                <SearchableDropdown OnSubmit="(item) => { CreateCryptoCurrencyPaymentAccountRequest.CurrencyCode = item; CreateCryptoCurrencyPaymentAccountRequest.AccountName = item; }" Text="Cryptocurrency" Items="CryptoCurrencyHelper.CryptoCurrenciesDictionary" Placeholder="Select or search cryptocurrency" />
            </div>
            <div class="field">
                <label>Cryptocurrency address</label>
                <InputText placeholder="" @bind-Value="CreateCryptoCurrencyPaymentAccountRequest.Address"></InputText>
            </div>
            <div class="field">
                <InfoRow Label="Limitations" Value="@($"Max {((ulong)MaxTradeLimit).ToMonero()} XMR / Max trade duration: {TimeHelper.FormatDuration(MaxTradePeriod)}")"></InfoRow>
            </div>
            <label>Account name</label>
            <InputText readonly="@(!CustomAccountNameEnabled)" @bind-Value="CreateCryptoCurrencyPaymentAccountRequest.AccountName"></InputText>
            <div class="custom-account-name">
                <InputCheckbox @bind-Value="@CustomAccountNameEnabled" />
                <label>Use custom account name</label>
            </div>
            <button @onclick="CreateCryptoPaymentAccountAsync">Save new account</button>
        </div>
    }
    else if (PaymentAccountForm is not null)
    {
        <EditForm EditContext="_editContext" class="input-fields" OnValidSubmit="CreatePaymentAccountAsync">
            <DataAnnotationsValidator />
            @for (int i = 0; i < PaymentAccountForm.Fields.Count; i++)
            {
                var field = PaymentAccountForm.Fields[i];

                switch (field.Id)
                {
                    case FieldId.TRADE_CURRENCIES:
                        @if (SupportedCurrencyCodes.Count != 0)
                        {
                            <div class="checkbox-list-wrapper">
                                <div class="checkbox-list">
                                    <p class="checkbox-list-text ">Supported currencies</p>
                                    @foreach (var supportedCurrencyCode in SupportedCurrencyCodes)
                                    {
                                        <div class="checkbox-container">
                                        <InputCheckbox @bind-Value="@supportedCurrencyCode.IsSelected" @bind-Value:after="HandleCurrencyChange" />

                                        @if (Enum.TryParse(typeof(Currency), supportedCurrencyCode.Code, out var currency))
                                        {
                                            <label>@CurrencyCultureInfo.GetCurrencyFullName((Currency)currency)</label>
                                        }
                                        else
                                        {
                                            <label>@supportedCurrencyCode.Code</label>
                                        }

                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case FieldId.ACCOUNT_NAME:
                        <div class="field">
                            <label>@field.Label</label>
                            <InputText readonly="@(!CustomAccountNameEnabled)" @bind-Value="field.Value"></InputText>
                            <div class="custom-account-name">
                                <InputCheckbox @bind-Value="@CustomAccountNameEnabled" />
                                <label>Use custom account name</label>
                            </div>
                            <ValidationMessage For="() => field.Label" />
                        </div>
                        break;
                    case FieldId.SALT:
                        break;
                    case FieldId.COUNTRY:
                        <div class="field">
                            @if (SelectedPaymentMethodId == "F2F" || SelectedPaymentMethodId == "MONEY_GRAM")
                            {
                                <SearchableDropdown OnSubmit="(country) => HandleCountryChanged(country, FieldId.COUNTRY)" Placeholder="Select country" Text="@field.Label" Items="@(CountryCodeHelper.CountryCodeDictionary)"/>
                            }
                            else
                            {
                                <SearchableDropdown OnSubmit="(country) => HandleCountryChanged(country, FieldId.COUNTRY)" Placeholder="Select country" Text="@field.Label" Items="@(field.SupportedCountries.ToDictionary(x => x.Code, x => $"{x.Name} ({x.Code})"))"/>
                            }
                        </div>
                        break;
                    case FieldId.ACCEPTED_COUNTRY_CODES:
                        @if (AcceptedEUSEPACountries.Count != 0)  // Should probably be a component
                        {
                            <div class="checkbox-list-wrapper">
                                <div class="checkbox-list">
                                    <p class="checkbox-list-text">Accept trades from these EU countries</p>
                                    @foreach (var acceptedCountry in AcceptedEUSEPACountries)
                                    {
                                        <div class="checkbox-container">
                                            <InputCheckbox @bind-Value="@acceptedCountry.IsSelected" />
                                            <label>@acceptedCountry.CodeWithCountry</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        @if (AcceptedNonEUSEPACountries.Count != 0)
                        {
                            <div class="checkbox-list-wrapper">
                                <div class="checkbox-list">
                                    <p class="checkbox-list-text">Accept trades from these non-EU countries</p>
                                    @foreach (var acceptedCountry in AcceptedNonEUSEPACountries)
                                    {
                                        <div class="checkbox-container">
                                            <InputCheckbox @bind-Value="@acceptedCountry.IsSelected" />
                                            <label>@acceptedCountry.CodeWithCountry</label>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    default:
                        {
                            if (SelectedPaymentMethodId == "SWIFT")
                            {
                                if (field.Label.Contains("Receiving Bank SWIFT"))
                                {
                                    <div class=@(ReceivingBankCollapsed ? "collapsible collapsible-collapsed" : "collapsible") @onclick="() => ReceivingBankCollapsed = !ReceivingBankCollapsed">
                                        <p>Receiving bank</p>
                                        <ion-icon name=@(ReceivingBankCollapsed ? "chevron-down-outline" : "chevron-up-outline")></ion-icon>
                                    </div>
                                    <div class=@(ReceivingBankCollapsed ? "swift-first-section section-collapsed" : "swift-first-section")>
                                        @for (int j = i; j < PaymentAccountForm.Fields.Count; j++)
                                        {
                                            var field2 = PaymentAccountForm.Fields[j];
                                            if (field2.Label.Contains("Intermediary Bank SWIFT"))
                                            {
                                                i = j - 1;
                                                break;
                                            }

                                            if (field2.Id == FieldId.BANK_COUNTRY_CODE)
                                            {
                                                <div class="field">
                                                    <SearchableDropdown OnSubmit="(country) => HandleCountryChanged(country, FieldId.BANK_COUNTRY_CODE)" Placeholder="Select country" Text="@field2.Label" Items="@(CountryCodeHelper.CountryCodeDictionary)"/>
                                                </div>
                                            }
                                            else
                                            {
                                                
                                                <div class="field">
                                                    <label>@field2.Label</label>
                                                    <InputText placeholder="" @bind-Value="field2.Value"></InputText>
                                                    <ValidationMessage For="() => field2.Label" />
                                                </div>      
                                            }
                                        }
                                    </div>

                                    continue;
                                }
                                else if (field.Label.Contains("Intermediary Bank SWIFT"))
                                {
                                    <div class=@(IntermediaryBankCollapsed ? "collapsible collapsible-collapsed" : "collapsible") @onclick="() => IntermediaryBankCollapsed = !IntermediaryBankCollapsed">
                                        <p>Intermediary bank</p>
                                        <ion-icon name=@(IntermediaryBankCollapsed ? "chevron-down-outline" : "chevron-up-outline")></ion-icon>
                                    </div>
                                    <div class=@(IntermediaryBankCollapsed ? "swift-second-section section-collapsed" : "swift-second-section")>
                                        <div class="custom-account-name">
                                            <InputCheckbox @bind-Value="UseIntermediaryBankEnabled"/>
                                            <label>Use intermediary bank</label>
                                        </div>
                                        @for (int j = i; j < PaymentAccountForm.Fields.Count; j++)
                                        {
                                            var field2 = PaymentAccountForm.Fields[j];
                                            if (field2.Label.Contains("Account owner full name"))
                                            {
                                                i = j - 1;
                                                break;
                                            }
                                        
                                            if (field2.Id == FieldId.INTERMEDIARY_COUNTRY_CODE)
                                            {
                                                <div class="field">
                                                    <SearchableDropdown OnSubmit="(country) => HandleCountryChanged(country, FieldId.INTERMEDIARY_COUNTRY_CODE)" Placeholder="Select country" Text="@field2.Label" Items="@(CountryCodeHelper.CountryCodeDictionary)"/>
                                                </div>
                                            }
                                            else
                                            {
                                                
                                                <div class="field">
                                                    <label>@field2.Label</label>
                                                    <InputText placeholder="" @bind-Value="field2.Value"></InputText>
                                                    <ValidationMessage For="() => field2.Label" />
                                                </div>      
                                            }   
                                        }
                                    </div>  

                                    continue;
                                }
                            }
                            <div class="field">
                                <label>@field.Label</label>
                                <InputText placeholder="" @bind-Value="field.Value"></InputText>
                                <ValidationMessage For="() => field.Label" />
                            </div>  
                        }
                        break;
                }
            }
            <div class="field">
                <InfoRow Label="Limitations" Value="@($"Max {((ulong)MaxTradeLimit).ToMonero()} XMR / Max trade duration: {TimeHelper.FormatDuration(MaxTradePeriod)}")"></InfoRow>
            </div>
            <button type="submit">Save new account</button>
        </EditForm>
    }
</div>