@page "/"

<Spinner IsFullscreen="true" IsVisible="IsInitializing"/>

<Modal IsOpen="IsInstallTypeModalOpen"
    Title="Initial setup"
    ModalButtonOptions="ModalButtonOptions.NONE"
    IsCloseable="false">
    <div class="install-modal">
        <p class="regular-p-grey">In order to use the app in standalone mode the Haveno daemon needs to be installed ~400mb download</p>
        <p>Please choose an installation type</p>

        <div class="buttons">
            <button class="verify-modal-button button-green" @onclick="@(async (e) => { IsInstallTypeModalOpen = false; await HandleInstall(DaemonInstallOptions.Standalone); })">Standalone</button>
            <button class="verify-modal-button button-green" @onclick="@(async (e) => { IsInstallTypeModalOpen = false; await HandleInstall(DaemonInstallOptions.RemoteNode); })">Remote node</button>
        </div>
    </div>
</Modal>
<Modal IsOpen="DaemonSetupState != DaemonSetupState.Initial && DaemonSetupState != DaemonSetupState.Finished" Title="Haveno setup" ModalButtonOptions="ModalButtonOptions.NONE" IsCloseable="false">
    @switch (DaemonSetupState)
    {
        case DaemonSetupState.InstallingDependencies:
            <div class="loader-text-container">
                <span class="loader"></span>
                <p class="regular-p-grey">(1 / 3) Downloading dependencies @($"{InstallProgress:F0}%")</p>
            </div>
            break;
         case DaemonSetupState.ExtractingRootfs:
            <div class="loader-text-container">
                <span class="loader"></span>
                <p class="regular-p-grey">(2 / 3) Extracting</p>
            </div>
            break;
        // TODO Just change text instead
        case DaemonSetupState.InstallingDaemon:
            <div class="loader-text-container">
                <span class="loader"></span>
                <p class="regular-p-grey">(3 / 3) Downloading Haveno @($"{InstallProgress:F0}%")</p>
            </div>
            break;
        case DaemonSetupState.UpdatingDaemon:
            <div class="loader-text-container">
                <span class="loader"></span>
                <p class="regular-p-grey">Updating Haveno @($"{InstallProgress:F0}%")</p>
            </div>
            break;
        default: break;
    }
</Modal>
<Modal 
    IsOpen="InstallationErrorMessage is not null" 
    Title="Installation error"
    ModalButtonOptions="ModalButtonOptions.CANCEL"
    OnCancelPressed="@(() => { IsInstallTypeModalOpen = true; InstallationErrorMessage = null; })"
    CancelButtonText="Close">
    <p class="installation-error-text">@InstallationErrorMessage</p>
</Modal>
<Modal IsOpen="IsDaemonStartInfoModalOpen || DaemonStartInfo != string.Empty" Title="Initializing" ModalButtonOptions="ModalButtonOptions.NONE" IsCloseable="false">
    <p class="regular-p-grey init-text-top">Haveno is starting, please wait</p>
    <div class="loader-text-container">
        <span class="loader"></span>
        <p class="regular-p-grey init-text">@DaemonStartInfo</p>
    </div>
    @if (DaemonStartInfo == "Initializing wallet")
    {
        <button class="button-submit" @onclick="@(() => NavigationManager.NavigateTo("/Market"))">Skip initialization</button>
    }
</Modal>