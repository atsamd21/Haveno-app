@page "/trades"

<div class="tabs">
    <Tabs TabNames="@(["Open trades", "History", "Disputes"])" @bind-SelectedTabIndex="@SelectedTabIndex"></Tabs>
</div>

@switch (SelectedTabIndex)
{
    case 0:
    case 1:
        if (FilteredTradeInfos.Count != 0)
        {
            <ul class="trades-list">
            @foreach (var tradeInfo in FilteredTradeInfos)
            {
                <li class="trade-card">
                    @* if this is a completed or canceled trade this should open a modal instead TODO *@
                    <a href=@($"trade?tradeId={tradeInfo.TradeId}&title=Trade%20{@tradeInfo.ShortId}")>
                        <div class="trade-card-top">
                            <p class="short-id">#@tradeInfo.ShortId</p>
                            <p>@(tradeInfo.Date.ToDateTime().ToLocalTime().ToString("yyyy/MM/dd"))</p>
                            @if (SelectedTabIndex == 1)
                            {
                                <p class="status">@(tradeInfo.IsCompleted ? "Completed" : "") </p>
                            }
                            <div class="icon-container">
                                @* <ion-icon name="information-circle"></ion-icon> *@
                                <a href=@($"/chat?tradeId={tradeInfo.TradeId}&title=Trade%20{tradeInfo.ShortId}%20chat&arbitrator={tradeInfo.ArbitratorNodeAddress.Split(".")[0]}&tradePeer={tradeInfo.TradePeerNodeAddress.Split(".")[0]}&myAddress={tradeInfo.Offer.OwnerNodeAddress.Split(".")[0]}")>
                                    <ion-icon name="chatbubble-ellipses-sharp"></ion-icon>
                                </a>
                            </div>
                        </div>
                    </a>
                </li>
            }
            </ul>
        }
        else
        {
            <p>No trades</p>
        }
        break;
    case 2:
        if (Disputes.Count != 0)
        {
            <ul class="disputes-list">
            @foreach (var dispute in Disputes)
            {
                var weAreBuyer = (dispute.DisputeOpenerIsBuyer && dispute.IsOpener) || (!dispute.DisputeOpenerIsBuyer && !dispute.IsOpener);

                <li class="dispute-card">
                    <a href=@($"/chat?disputeTradeId={dispute.TradeId}&disputeId={dispute.Id}&title=Dispute%20for%20trade%20{dispute.TradeId.Split("-")[0]}&arbitrator={dispute.Contract.ArbitratorNodeAddress.HostName.Split(".")[0]}&tradePeer={(weAreBuyer ? dispute.Contract.SellerNodeAddress.HostName.Split(".")[0] : dispute.Contract.BuyerNodeAddress.HostName.Split(".")[0])}&myAddress={(weAreBuyer ? dispute.Contract.BuyerNodeAddress.HostName.Split(".")[0] : dispute.Contract.SellerNodeAddress.HostName.Split(".")[0])}")>
                        <p>@dispute.OpeningDate.ToDateTime().ToLocalTime().ToString("yyyy/MM/dd")</p>
                        <p>@dispute.TradeId.Split("-")[0]</p>
                        <p>@dispute.State</p>
                        <p>@(dispute.DisputeOpenerIsBuyer && dispute.IsOpener)</p>
                    </a>
                </li>
            }
            </ul>
        }
        else
        {
            <p>No disputes</p>
        }
    break;
    default: break;
}
