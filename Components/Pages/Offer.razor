@page "/buysell/offer"

<div class="offer-main">
    <div class="dropdown">
        <SearchableDropdown Disabled="@(PaymentAccounts.Count < 2)" InitialValue="@SelectedPaymentAccountId" Text="Trading account" Placeholder="Trading account" Items="@PaymentAccounts" OnSubmit="(val) => SelectedPaymentAccountId = val"></SearchableDropdown>
    </div>
    <label>Amount</label>
    <input disabled="@(UserDoesNotHaveAccount || OfferInfo?.MinAmount == OfferInfo?.Amount)" step="0.01" min="@OfferInfo?.MinAmount.ToMonero()" max="@OfferInfo?.Amount.ToMonero()" @bind="@Amount" type="number" />
    @if (OfferInfo?.MinAmount == OfferInfo?.Amount)
    {
        <p class="range">Min/Max: @OfferInfo?.MinAmount.ToMonero() XMR</p>
    }
    else
    {
        <p class="range">Min/Max: @OfferInfo?.MinAmount.ToMonero() XMR - @OfferInfo?.Amount.ToMonero() XMR</p>
    }
    <label>Total in @OfferInfo?.CounterCurrencyCode</label>
    <input readonly @bind="@FiatAmount" type="number" step="0.01" />
    <div class="slider-container">
        <Slider OnReachedEnd="TakeOfferAsync" Disabled="@UserDoesNotHaveAccount" Text="Take offer"></Slider>
    </div>
    <button class="button-cancel" @onclick="Cancel">Cancel</button>
</div>

<Modal IsOpen="IsTakingOffer" Title="Taking offer" ModalButtonOptions="ModalButtonOptions.NONE" OnCancelPressed="() => CancelOfferCts.Cancel()">
    <p class="regular-p-grey">Please wait</p>
    @* <Spinner IsVisible="true"></Spinner> *@
</Modal>
<Modal Title="No payment account" IsOpen="UserDoesNotHaveAccount" ModalButtonOptions="ModalButtonOptions.OK" OkButtonText="Create account" OnOkPressed="@NavigateToAccount">
    <p class="regular-p-grey">@AccountErrorMessage</p>
</Modal>
