@* give this a background that covers screen like modal so user can click out of the input more easily *@
@* show all default option*@

<div class=@($"searchable-dropdown-main {(_isActive ? "rotate" : "")} {(Disabled ? "disabled" : "")} {Class}")>
    <p class="text">@Text</p>
    <input type="text"
    readonly="@Disabled"
    placeholder="@Placeholder"
    @onfocusout="() => _isActive = false"
    @onfocusin="() => {if(Disabled) return; _isActive = true;}"
    @bind="_searchTerm"
    @oninput="OnSearchTermChange"
    class=@(_visibleItems.Count == 0 || !_isActive ? "input-hidden" : "input-visible") />
    <div class="list-wrapper">
        <ul class=@(_visibleItems.Count == 0 || !_isActive ? "list hidden" : "list visible")>
            @foreach (var item in _visibleItems)
            {
                <li @onclick="() => OnItemClick(item.Key)" class="item-li">
                    <p>@item.Value</p>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private Dictionary<string, string> _visibleItems = [];
    private string _searchTerm = string.Empty;
    private bool _shouldRender = true;

    private bool _isActive 
    {
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
            }
            field = value;
        }
    }

    [Parameter]
    public bool Disabled 
    { 
        get;
        set
        {
            if (field != value)
            {
                _shouldRender = true;
            }
            field = value;
        }
    }

    [Parameter]
    public string? Class
    {
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
            }
            field = value;
        }
    }

    [Parameter]
    [EditorRequired]
    public Dictionary<string, string> Items 
    { 
        get; 
        set 
        {
            if (field != value)
            {
                _shouldRender = true;
            }

            field = value;
            _visibleItems = value; 

            if (!string.IsNullOrEmpty(InitialValue))
                _searchTerm = Items[InitialValue];
        } 
    } = [];

    [EditorRequired]
    [Parameter]
    public string Text 
    { 
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
            }

            field = value;
        }
    } = string.Empty;

    [EditorRequired]
    [Parameter]
    public string Placeholder 
    { 
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
            }

            field = value;
        }
    } = string.Empty;

    // Switch to bind?
    [Parameter]
    public EventCallback<string> OnSubmit { get; set; }

    [Parameter]
    public string? InitialValue
    {
        get;
        set
        {
            if (field != value)
            {
                _shouldRender = true;
            }

            field = value;
        }
    }

    public async Task OnSearchTermChange(ChangeEventArgs e)
    {
        if (string.IsNullOrEmpty((string)e.Value!))
        {
            _visibleItems = Items;
            _searchTerm = string.Empty;
            await OnSubmit.InvokeAsync(string.Empty);
        }
        else
        {
            _visibleItems = Items.Where(x => x.Value.ToLower().Contains(((string)e.Value).ToLower())).ToDictionary();
        }

        _shouldRender = true;
        StateHasChanged();
    }

    public async Task OnItemClick(string key)
    {
        _searchTerm = Items[key];
        await OnSubmit.InvokeAsync(key);
        _visibleItems = Items.Where(x => x.Value.ToLower().Contains((key).ToLower())).ToDictionary();
        _shouldRender = true;
    }

    protected override bool ShouldRender()
    {
        var shouldRender = _shouldRender;
        _shouldRender = false;
        return shouldRender;
    }

    public void Clear()
    {
        _searchTerm = string.Empty;
        _shouldRender = true;
    }
}
