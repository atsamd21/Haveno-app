@if (!string.IsNullOrEmpty(Title))
{
    <p class="bold-p">@Title</p>
}
<div class=@(Center ? "tabs-main center" : "tabs-main")>
    @for (int i = 0; i < TabNames.Count; i++)
    {
        int iCopy = i;
        bool isDisabled = DisabledTabNames.Contains(TabNames[iCopy]);
        <button disabled="@isDisabled" class=@(SelectedTabIndex == iCopy ? "active" : "regular-p-grey") @onclick="(e) => SelectedTabIndex = iCopy">@TabNames[iCopy]</button>
    }
</div>

@code {
    [Parameter]
    public List<string> TabNames { get; set; } = [];
    // For now
    [Parameter]
    public List<string> DisabledTabNames { get; set; } = [];
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public int SelectedTabIndex
    {
        get;
        set
        {
            if (field == value) 
                return;

            field = value;
            SelectedTabIndexChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<int> SelectedTabIndexChanged { get; set; }
    [Parameter]
    public bool Center { get; set; }
}
