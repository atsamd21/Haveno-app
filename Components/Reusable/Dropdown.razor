@typeparam TValue

<div class=@($"{Class} dropdown-main {(_isActive ? "rotate" : "")}")>
    @if (!string.IsNullOrEmpty(@Text))
    {
        <p class="text">@Text</p>
    }
    <input type="text"
           placeholder="@Placeholder"
           @onfocusout="() => _isActive = false"
           @onfocusin="() => _isActive = true"
           @bind="Value"
           class=@(!_isActive ? "in-hidden" : "in-visible") />
    <ul class=@(!_isActive ? "list hidden" : "list visible")>
        @foreach (var item in Items)
        {
            <li @onclick="() => OnItemClick(item)" class="item-li">
                <p>@item</p>
            </li>
        }
    </ul>
</div>

@code {
    private bool _shouldRender = true;

    private bool _isActive 
    {
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
                field = value;
            }
        }
    }

    [Parameter]
    public bool Disabled 
    { 
        get;
        set
        {
            if (field != value)
            {
                _shouldRender = true;
                field = value;
            }
        }
    }

    [Parameter]
    public string? Class
    {
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
                field = value;
            }
        }
    }

    [Parameter, EditorRequired]
    public List<TValue> Items
    { 
        get; 
        set 
        {
            if (field != value)
            {
                _shouldRender = true;
                field = value;
            }
        } 
    } = [];

    [Parameter]
    public string Text 
    { 
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
                field = value;
            }
        }
    } = string.Empty;

    [Parameter]
    public string Placeholder 
    { 
        get; 
        set
        {
            if (field != value)
            {
                _shouldRender = true;
                field = value;
            }
        }
    } = "Select";

    [Parameter]
    public TValue Value
    {
        get;
        set
        {
            if (!object.Equals(field, value))
            {
                _shouldRender = true;

                field = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }

    [Parameter]
    public EventCallback<TValue> ValueChanged { get; set; }

    public void OnItemClick(TValue item)
    {
        Value = item;
    }

    protected override bool ShouldRender()
    {
        var shouldRender = _shouldRender;
        _shouldRender = false;
        return shouldRender;
    }
}
