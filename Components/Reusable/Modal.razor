@if (IsOpen)
{
    <div class="generic-modal" @onclick="@((e) => IsOpen = !IsOpen)">
        <div class="verify-modal">
            <div class="top">
                <div class="top-icons">
                    <i class="bi-exclamation-circle info"></i>
                    <p class="verify-title">@Title</p>
                    <i class="bi-x-lg close" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@((e) => IsOpen = false)"></i>
                </div>
                @ChildContent
            </div>

            @if (VisibleButtons)
            {
                <div class="buttons">
                    <button class="verify-modal-button" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@(async (e) => { IsOpen = false; await OnOkPressed.InvokeAsync(); })">@OkButtonText</button>
                    <button class="verify-modal-button" @onclick:stopPropagation="true" @onclick:preventDefault="true" @onclick="@((e) => {IsOpen = false; OnCancelPressed.InvokeAsync();})">Cancel</button>
                </div>                
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string Title { get; set; } = string.Empty;
    [Parameter]
    public string OkButtonText { get; set; } = "Ok";
    [Parameter]
    public bool VisibleButtons { get; set; } = true;
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public EventCallback OnOkPressed { get; set; }
    [Parameter]
    public EventCallback OnCancelPressed { get; set; }

    [Parameter]
    public bool IsOpen
    {
        get;
        set
        {
            if (field == value)
                return;

            field = value;
            IsOpenChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }
}
